plugins {
    id 'java-gradle-plugin'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'maven-publish'
}

group = 'com.babylonhealth'
version = '1.0.4'

repositories {
    mavenCentral()
    jcenter()
    google()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly gradleApi()

    // Third Party
    compileOnly 'com.android.tools.build:gradle:3.5.0'

    compile 'com.squareup.okhttp3:okhttp:3.12.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.0'
    compile 'com.squareup.retrofit2:converter-gson:2.6.1'
    compile 'com.squareup.retrofit2:retrofit:2.6.1'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile gradleTestKit()

    testRuntime "cglib:cglib-nodep:3.2.4"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.4"    // allows mocking of classes without default constructor (together with CGLIB)
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform {}
}

/**
 * Integration test
 */
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test, group: "verification") {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest

gradlePlugin {
    plugins {
        appCenterPlugin {
            id = 'com.babylonhealth.appcenter'
            displayName = 'Gradle AppCenter Plugin'
            description = 'Plugin to upload APK to AppCenter'
            implementationClass = 'com.betomorrow.gradle.appcenter.AppCenterPlugin'
        }
    }

    testSourceSets sourceSets.integrationTest
}

/**
 * Publishing
 */

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifact sourceJar
        }
    }

    def internalRepoUrl = System.getProperty("INTERNAL_REPO_URL")
    if (internalRepoUrl != null) {
        repositories {
            maven {
                url internalRepoUrl
                credentials {
                    username System.getProperty("INTERNAL_REPO_USERNAME")
                    password System.getProperty("INTERNAL_REPO_PASSWORD")
                }
            }
        }
    }
}

wrapper {
    gradleVersion = "5.6"
    distributionType = Wrapper.DistributionType.ALL
}

pluginBundle {

    website = 'https://github.com/oliviergauthier/gradle-appcenter-plugin'
    vcsUrl = 'https://github.com/oliviergauthier/gradle-appcenter-plugin'
    tags = ['android', 'appcenter', 'plugin', 'tool']

}
